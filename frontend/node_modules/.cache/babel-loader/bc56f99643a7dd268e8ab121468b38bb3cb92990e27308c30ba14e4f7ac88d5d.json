{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ranve\\\\Downloads\\\\schoolazon_mvp_realtime\\\\frontend\\\\src\\\\pages\\\\PostInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport socket from '../socket';\nimport api from '../api';\n\n// Simple input that can send text and optional attachment (upload via existing /resources/upload to Cloudinary)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostInput({\n  community\n}) {\n  _s();\n  const [text, setText] = useState('');\n  const [file, setFile] = useState(null);\n  const [msg, setMsg] = useState('');\n  const send = async e => {\n    e.preventDefault();\n    let attachmentUrl = null;\n    try {\n      if (file) {\n        const fd = new FormData();\n        fd.append('file', file);\n        fd.append('title', 'post-attachment');\n        fd.append('description', 'attachment');\n        fd.append('communityId', community._id);\n        // use /resources/upload which returns resource object with fileUrl\n        const res = await api.post('/resources/upload', fd, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        attachmentUrl = res.data.fileUrl;\n      }\n      // emit via socket\n      socket.emit('send_post', {\n        communityId: community._id,\n        text,\n        attachmentUrl\n      });\n      setText('');\n      setFile(null);\n      setMsg('Sent');\n      setTimeout(() => setMsg(''), 2000);\n    } catch (err) {\n      console.error(err);\n      setMsg('Failed to send');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: send,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Write a quick post...\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        style: {\n          width: 400,\n          height: 80\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 136\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 69\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), \" \", msg && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: 8\n        },\n        children: msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n}\n_s(PostInput, \"GqqV7/34LJ2+06tBd6dQMDTmHG8=\");\n_c = PostInput;\nvar _c;\n$RefreshReg$(_c, \"PostInput\");","map":{"version":3,"names":["React","useState","socket","api","jsxDEV","_jsxDEV","PostInput","community","_s","text","setText","file","setFile","msg","setMsg","send","e","preventDefault","attachmentUrl","fd","FormData","append","_id","res","post","headers","data","fileUrl","emit","communityId","setTimeout","err","console","error","children","onSubmit","placeholder","value","onChange","target","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","type","files","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/ranve/Downloads/schoolazon_mvp_realtime/frontend/src/pages/PostInput.js"],"sourcesContent":["import React, { useState } from 'react';\nimport socket from '../socket';\nimport api from '../api';\n\n// Simple input that can send text and optional attachment (upload via existing /resources/upload to Cloudinary)\nexport default function PostInput({ community }){\n  const [text, setText] = useState('');\n  const [file, setFile] = useState(null);\n  const [msg, setMsg] = useState('');\n\n  const send = async (e)=>{\n    e.preventDefault();\n    let attachmentUrl = null;\n    try{\n      if(file){\n        const fd = new FormData();\n        fd.append('file', file);\n        fd.append('title', 'post-attachment');\n        fd.append('description','attachment');\n        fd.append('communityId', community._id);\n        // use /resources/upload which returns resource object with fileUrl\n        const res = await api.post('/resources/upload', fd, { headers: {'Content-Type':'multipart/form-data'} });\n        attachmentUrl = res.data.fileUrl;\n      }\n      // emit via socket\n      socket.emit('send_post', { communityId: community._id, text, attachmentUrl });\n      setText(''); setFile(null); setMsg('Sent');\n      setTimeout(()=>setMsg(''), 2000);\n    }catch(err){\n      console.error(err);\n      setMsg('Failed to send');\n    }\n  };\n\n  return <div>\n    <form onSubmit={send}>\n      <textarea placeholder='Write a quick post...' value={text} onChange={e=>setText(e.target.value)} style={{width:400,height:80}} /><br/>\n      <input type='file' onChange={e=>setFile(e.target.files[0])} /><br/>\n      <button>Send</button> {msg && <span style={{marginLeft:8}}>{msg}</span>}\n    </form>\n  </div>;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}